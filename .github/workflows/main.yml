# name: Build

# on: push

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     permissions: read-all
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevanc-y of analysis
#       - name: Set up JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: 17
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache Maven packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       - name: Build and analyze
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=my-maven-project -Dsonar.projectName='my-maven-project'
#       - name: Archive Maven artifacts
#         id: upload
#         uses: actions/upload-artifact@v2
#         with:
#           name: maven-artifacts
#           path: '**/*.war' 
  
#       - uses: actions/checkout@v3
#       - name: Set up JDK 8
#         uses: actions/setup-java@v3
#         with:
#           java-version: '8'
#           distribution: 'temurin'
#           cache: maven
#       - name: Build with Maven
#         run: mvn package
#       # - name: tomcat deploy
#       #   run: curl -v -u  ${{ secrets.TOMCAT_USERNAME }}:${{ secrets.TOMCAT_PASSWORD }} -T /home/ubuntu/actions-runner/_work/spring3-mvc-maven-xml-hello-world/spring3-mvc-maven-xml-hello-world/target/spring3-mvc-maven-xml-hello-world-1.3.war
    
#       - name: Download and Deploy Artifact
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           script: |
#             pwd
#             # Copy the .war file to the Bitnami Tomcat container
#             docker cp /home/ubuntu/actions-runner/_work/spring3-mvc-maven-xml-hello-world1/spring3-mvc-maven-xml-hello-world1/target/chinna-app.war tomcat:/bitnami/tomcat/webapps/
    


name: Java Build, Analyze, and Deploy

on:
  push:
    branches: [ main ]  # Adjust this to your main branch name
  pull_request:
    branches: [ main ]

jobs:
  build-analyze-deploy:
    name: Build, Analyze, and Deploy
    runs-on: ubuntu-latest
    permissions: read-all

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze with SonarQube
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=my-maven-project -Dsonar.projectName='my-maven-project'

    - name: Archive Maven artifacts
      uses: actions/upload-artifact@v3
      with:
        name: maven-artifacts
        path: '**/target/*.war'

    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          docker cp /home/ubuntu/actions-runner/_work/spring3-mvc-maven-xml-hello-world1/spring3-mvc-maven-xml-hello-world1/target/chinna-app.war tomcat:/bitnami/tomcat/webapps/
